BUILDING AND INSTALLING MFP 
===================================

Version 0.05, 2014-06-20

TL;DR
---------------------

   $ ./waf configure --virtualenv --prefix ~/mfpvirt build install install_deps 
     [...] 
   $ . ~/mfpvirt/bin/activate  
   (virtual)$ mfp 

THINGS TO KNOW 
---------------------

waf: MFP uses 'waf', which you can think of as a replacement for
autotools and make.  You do not need to install waf; the correct
version is supplied in the MFP source tree.  That's the way waf
is designed to work; more information can be found at
https://code.google.com/p/waf/.  MFP's "Makefile" or
"configure.in" equivalent is the file "wscript", which is a plain
Python file.  The entry points used by waf are the functions
"configure" and "build", defined near the bottom of the file. 

virtualenv: At this phase of MFP's development you should
probably build it in a "virtualenv" sandbox.  The waf scripts
support this, but you have to install the "virtualenv" tool
(packaged as 'python-virtualenv' on Debian and Ubuntu). Then you
configure with --virtualenv as in the TL;DR above and the build
will go into the virtual environment.  When you specify
--virtualenv, the install prefix (--prefix) is the path to the
virtual environment, so you shouldn't let this default to
/usr/local.  

setuptools: The build process depends on Python setuptools.  If
you have virtualenv installed, you have setuptools already, but
if you aren't using virtualenv you may need to install setuptools
separately.  It's packaged as "python-setuptools" on Debian and
Ubuntu. 

gcc: The C components of mfp (mfpdsp, pluginfo, and testext) are
straightforward C but include some c99-isms.  I have been using
gcc-4.8.3 but other versions should work. 

CONFIGURING 
-----------------------

The basic form: 

    $ ./waf configure [options] 

A full list of options is shown by ./waf --help, under
"Configuration options".  --virtualenv is the only "custom"
option. 


BUILDING 
-----------------------

    $ ./waf build 

This will build the project into ./wafbuild (or other directory as
specified to "configure").  There may be some temporary stuff placed
into ./build/ and ./dist/ by setuptools, so I wouldn't use those as
names for the waf build directory. 

LIBRARIES
-----------------------

The "mfpdsp" C library/program needs a few C libraries with their
development headers and pkg-config files installed:  

 * glib-2.0       (GLib/GObject) 
 * json-glib-2.0  (JSON serializing/deserializing)
 * serd-0         (LV2 TTL parsing) 
 * jack           (duh)

You'll get errors in the "./waf configure" process if these aren't installed.  

Python runtime dependencies are checked for in "configure" and
can be automagically installed by "./waf install_deps" if you
wish.  install_deps must be run after "./waf install".  If you
are using a virtualenv, the installed Python libraries will also
be installed into the virtualenv. 

INSTALLING
--------------------------

    $ ./waf install 

The installation root defaults to /usr/local and can be modified
by passing in the --prefix argument to "./waf configure".

